global:
  # cluster defines the cluster type
  cluster: kubernetes
  # domain defines the domain suffix
  domain: .my-cluster.dns
  # instance is the ID of the installation
  instance: drogue

  drogueCloud:
    jaeger:
      enabled: false

    keycloak:
      # enable keycloak deployment
      enabled: true
      # downgrade to insecure deployment
      insecure: false
      postInstall:
        image: quay.io/keycloak/keycloak:20.0

    defaults:
      podSecurityContext: {}
      containerSecurityContext: {}

defaults:
  images:
    repository: ghcr.io/drogue-iot
    # pullPolicy Sets the pull policy explicitly. Defaults to Always when using the 'latest'
    #   tag and to IfNotPresent otherwise.
    # pullPolicy: IfNotPresent
    # tag The container tag to apply. Defaults to the chart's application version
    # tag: latest
  ingress:
    # className The ingress class name to use. Defaults to none, to let the cluster decide.
    # className: nginx
    annotations: {}
  logging:
    debug: false
    rust:
      # log: info
      # backtrace: true

console:
  localCertificates: false
  # allow overriding certain aspects of the console
  overrides:
    api: {}
      # url: https://foo-bar
    console: {}
      # url: https://foo-bar
    coapEndpoint: {}
      # url: coaps://foo-bar
    httpEndpoint: {}
      # url: https://foo-bar
    mqttEndpoint: {}
      # port: 8883
    mqttEndpointWs: {}
      # url: wss://mqtt-ws
    mqttEndpointWsBrowser: {}
      # url: wss://mqtt-ws
    mqttIntegration: {}
      # port: 8883
    mqttIntegrationWsBrowser: {}
      # url: wss://mqtt-ws
    mqttIntegrationWs: {}
      # url: wss://mqtt-ws
    wsIntegration: {}
      # url: wss://foo-bar
    kafka: {}
      # servers: bootstrap:1234


endpoints:

  http:
    deployment: {}
    service:
      certificates:
        secret: "http-endpoint-tls"
    ingress:
      port: 443

  mqtt:
    deployment: {}
    service:
      certificates:
        secret: "mqtt-endpoint-tls"
    ingress:
      port: 8883

  mqttWs:
    deployment: {}
    service:
      certificates:
        secret: "mqtt-endpoint-tls"
    ingress:
      port: 443

  mqttWsBrowser:
    deployment: {}
    service:
      certificates:
        secret: "mqtt-endpoint-tls"
    ingress:
      port: 443

  coap:
    deployment: {}
    service:
      certificates:
        secret: "coap-endpoint-tls"
    ingress:
      port: 5684


integrations:

  mqtt:
    deployment: {}
    service:
      certificates:
        secret: "mqtt-endpoint-tls"
    ingress:
      port: 8883

  mqttWs:
    deployment: {}
    service:
      certificates:
        secret: "mqtt-endpoint-tls"
    ingress:
      port: 443

  mqttWsBrowser:
    deployment: {}
    service:
      certificates:
        secret: "mqtt-endpoint-tls"
    ingress:
      port: 443

  websocket:
    deployment: {}
    service: {}
    ingress:
      port: 443
    resources:
      limits:
        memory: 64Mi

services:
  # console frontend
  consoleFrontend:
    deployment: {}
    ingress: {}
    service: {}

  # console backend
  console:
    deployment: {}
    ingress: {}
    service: {}
  api:
    deployment: {}
    ingress: {}
    service: {}
  swaggerUi:
    deployment: {}
  sso:
    ingress: {}
  registry:
    deployment: {}
    ingress: {}
    service: {}
  deviceManagementController:
    deployment: {}
  deviceState:
    deployment: {}
    service: {}
  topicOperator:
    deployment: {}
  outbox:
    deployment: {}
  ttnOperator:
    deployment: {}
  auth:
    deployment: {}
    service: {}
  userAuth:
    deployment: {}
    service: {}
  command:
    deployment: {}
    ingress: {}
    service: {}
  knativeOperator:
    deployment: {}
    enabled: true
    eventSource:
      image: ghcr.io/drogue-iot/drogue-event-source:0.2.3


certificates:
  generator:
    enabled: true


helper:
  image: registry.access.redhat.com/ubi9-minimal:latest


oauth2:
  tls:
    insecure: false
  # The issuer URL. By default, this is the locally deployed keycloak instance
  # issuerUrl: http://service/some/realm


keycloak:
  deployment:
    # Can be set to false, to disable the deployment. NOTE: this will still run the post-install job.
    enabled: true
  adminUser: admin
  adminPassword: admin123456
  identityProviders: []
  ingress:
    disable: false
  realm: drogue
  postgres:
    # mode is the way postgres gets configured. This can be:
    #  - drogue: Re-use the Drogue Cloud postgres instance
    #  - external: Use an external instance
    mode: drogue  # reuse drogue instance
    # username: foo
    # password: bar
    # you can provide either:
    #   url: jdbc:postgresql://foo/bar
    # or:
    #   host: postgres
    #   port: 5678
    #   databaseName: keycloak
  # resources can be used to define the resource requirements
  # resources:
  # postInstall is used to create a job which fixes up roles for a newly deployed Keycloak 15.x instance.
  postInstall:
    # enabled can be used to disable the job, in case you don't need it or are upgrading from
    # a Keycloak 12 instance, in which case you need to manually configure the roles.
    enabled: true
    # kcAdmPath: path the kcadm.sh binary
    user:
      enabled: true
      name: admin
      password: admin123456
    # allows to enable "resource owner password flow" with the main OAuth2 client (drogue).
    resourceOwnerPasswordFlow: false

  clients:
    services:
      # the secret of the client, replace with your own value (e.g. from pwgen -s 32)
      clientSecret: "vUpu7egrPK3Ggd0GHrfAzviTKRZgjG3u"

postgres:
  tls:
    enabled: false
    # the secret containing the key/cert, ignored if .global.drogueCloud.useServiceCA is true
    secret: postgres-tls
    # the configuration for the client's trust anchor, defaults to the system trust anchors
    # trustAnchor:
    #   configMap: <name> # either configMap
    #   secret: <name> # or a secret
    #   key: <key> # defaults to ca.crt
  databaseName: registry
  username: admin
  password: admin123456
  image: docker.io/bitnami/postgresql:15

  storage:
    size: 1G
    # className: <storage class name>

  # use an external postgres instance
  # external:
  #  host: <hostname>
  #  port: <port>

  # schema migration settings
  migration: {}

kafka:

  # explicit kafka version
  # version: "3.2.0"

  clusterResourceName: drogue-iot
  internalUserName: drogue-iot

  kafkaConfigProperties:
    offsets.topic.replication.factor: 1
    transaction.state.log.min.isr: 1
    transaction.state.log.replication.factor: 1
    default.replication.factor: 1
    min.insync.replicas: 1

  podSecurityContext:
    enabled: false

  externalAccess:
    enabled: true
    port: 9094
    type: nodeport
    tls:
      enabled: true

  # external can be used to configure Drogue Cloud to use an external Kafka instance
  external:
    enabled: false
    # bootstrapServer lists the boostrap server
    # bootstrapServer: my-server:9002
    # tls defines if TLS should be used or not
    tls:
      enabled: true
    sasl:
      enabled: false
      mechanism: SCRAM-SHA-512  # or PLAIN
      # username: my-user
      # password: my-password

    # properties allow you to provide arbitrary additional properties
    properties: {}

  kafka:
    replicas: 1
    storage:
      type: persistent-claim
      size: 10Gi
      deleteClaim: true

  zookeeper:
    replicas: 1
    storage:
      type: persistent-claim
      size: 1Gi
      deleteClaim: true

  topicOperator: {}
  userOperator: {}
  tlsSidecar: {}

experimental:
  # dualStack enables some workarounds for IPv4/IPv6 dual stack support. Enabling this flag shouldn't
  # interfere with a IPv4-only cluster.
  dualStack: false
