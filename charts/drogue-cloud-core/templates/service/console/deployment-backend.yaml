kind: Deployment
apiVersion: apps/v1
metadata:
  name: console-backend
  labels:
    app: console-backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: console-backend
  template:
    metadata:
      labels:
        app: console-backend
    spec:
      serviceAccountName: console-backend
      initContainers:
        - name: wait-for-client-secret-drogue
          image: registry.access.redhat.com/ubi8-minimal
          imagePullPolicy: IfNotPresent
          command:
            - bash
            - -c
            - |
              echo "Waiting for client secret to be populated (/etc/client-secret/CLIENT_SECRET)..."
              while test -z "$(cat /etc/client-secret/CLIENT_SECRET)"; do
                sleep 1
              done
          volumeMounts:
            - mountPath: /etc/client-secret
              name: client-secret-drogue
              readOnly: true
        - name: wait-for-client-secret-services
          image: registry.access.redhat.com/ubi8-minimal
          imagePullPolicy: IfNotPresent
          command:
            - bash
            - -c
            - |
              echo "Waiting for client secret to be populated (/etc/client-secret/CLIENT_SECRET)..."
              while test -z "$(cat /etc/client-secret/CLIENT_SECRET)"; do
                sleep 1
              done
          volumeMounts:
            - mountPath: /etc/client-secret
              name: client-secret-services
              readOnly: true
      containers:
        - name: endpoint
          image: {{ include "drogue-cloud-core.image-repo" . }}console-backend:{{ include "drogue-cloud-core.image-tag" . }}
          imagePullPolicy: {{ include "drogue-cloud-core.image-pull-policy" . }}
          env:
            - name: RUST_LOG
              value: debug
            - name: BIND_ADDR
              value: "0.0.0.0:8080"
            - name: HEALTH__BIND_ADDR
              value: "0.0.0.0:9090"
            - name: ENABLE_AUTH
              value: "true"
            - name: UI__CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: keycloak-client-secret-drogue
                  key: CLIENT_ID
            - name: UI__CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: keycloak-client-secret-drogue
                  key: CLIENT_SECRET
            - name: OAUTH__DROGUE__CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: keycloak-client-secret-drogue
                  key: CLIENT_ID
            - name: OAUTH__DROGUE__CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: keycloak-client-secret-drogue
                  key: CLIENT_SECRET
            - name: OAUTH__SERVICES__CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: keycloak-client-secret-services
                  key: CLIENT_ID
            - name: OAUTH__SERVICES__CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: keycloak-client-secret-services
                  key: CLIENT_SECRET
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: USER_AUTH__CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: keycloak-client-secret-services
                  key: CLIENT_ID
            - name: USER_AUTH__CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: keycloak-client-secret-services
                  key: CLIENT_SECRET
            - name: KEYCLOAK__URL
              value: https://keycloak.$(NAMESPACE).svc.cluster.local.:8443
            - name: KEYCLOAK__ADMIN_USERNAME
              valueFrom:
                secretKeyRef:
                  key: ADMIN_USERNAME
                  name: credential-sso
            - name: KEYCLOAK__ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: ADMIN_PASSWORD
                  name: credential-sso
            {{ if ne .Values.global.cluster "openshift" }}
            - name: ENDPOINTS__LOCAL_CERTS
              value: "true"
            - name: "KEYCLOAK__TLS_NOVERIFY"
              value: "true"
            {{- end }}
            - name: SSO_URL
              value: {{ include "drogue-cloud-common.sso.url" . }}
            - name: ENDPOINTS__API_URL
              value: {{ include "drogue-cloud-common.api.url" . }}
            - name: ENDPOINTS__CONSOLE_URL
              value: {{ include "drogue-cloud-common.ingress.proto" . -}}{{- include "drogue-cloud-common.ingress.hostname" (list . "console" ) }}
            - name: ENDPOINTS__REDIRECT_URL
              value: {{ include "drogue-cloud-common.ingress.proto" . -}}{{- include "drogue-cloud-common.ingress.hostname" (list . "console" ) }}
            - name: ENDPOINTS__DEVICE_REGISTRY_URL
              value: {{ include "drogue-cloud-common.api.url" . }}
            - name: ENDPOINTS__COMMAND_ENDPOINT_URL
              value: {{ include "drogue-cloud-common.api.url" . }}
            - name: ENDPOINTS__HTTP_ENDPOINT_URL
              value: {{ include "drogue-cloud-core.passthrough.ingress.url" (dict "root" . "prefix" "http-endpoint" "ingress" .Values.endpoints.http.ingress "insecure" .Values.endpoints.http.insecure ) }}
            - name: ENDPOINTS__MQTT_ENDPOINT_HOST
              value: {{ include "drogue-cloud-core.passthrough.ingress.host" (dict "root" . "prefix" "mqtt-endpoint" "ingress" .Values.endpoints.mqtt.ingress ) }}
            - name: ENDPOINTS__MQTT_ENDPOINT_PORT
              value: "{{ .Values.endpoints.mqtt.ingress.port }}"
            - name: ENDPOINTS__MQTT_INTEGRATION_HOST
              value: {{ include "drogue-cloud-core.passthrough.ingress.host" (dict "root" . "prefix" "mqtt-integration" "ingress" .Values.integrations.mqtt.ingress ) }}
            - name: ENDPOINTS__MQTT_INTEGRATION_PORT
              value: "{{ .Values.integrations.mqtt.ingress.port }}"
          ports:
            - containerPort: 8080
              name: endpoint
              protocol: TCP
          resources:
            limits:
              memory: 64Mi
          readinessProbe:
            initialDelaySeconds: 2
            periodSeconds: 1
            timeoutSeconds: 1
            failureThreshold: 3
            httpGet:
              port: 9090
              path: /readiness
          livenessProbe:
            initialDelaySeconds: 2
            periodSeconds: 1
            timeoutSeconds: 1
            failureThreshold: 3
            httpGet:
              port: 9090
              path: /liveness
      volumes:
        - name: client-secret-drogue
          secret:
            secretName: keycloak-client-secret-drogue
        - name: client-secret-services
          secret:
            secretName: keycloak-client-secret-services