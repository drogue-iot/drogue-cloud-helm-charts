{{- $ref := dict "root" . "name" "mqtt-integration" "component" "integrations" -}}
kind: Deployment
apiVersion: apps/v1
metadata:
  name: mqtt-integration
  labels:
    {{- include "drogue-cloud-core.labels" $ref | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "drogue-cloud-common.selectorLabels" $ref | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "drogue-cloud-core.labels" $ref | nindent 8 }}
    spec:
      initContainers:
        {{- include "drogue-cloud-common.init-container.wait-for-client-secret" ( dict "root" . "volume" "client-secret-services")  | nindent 8 }}
      containers:
        - name: service
          image: {{ include "drogue-cloud-core.image" $ref | quote }}
          imagePullPolicy: {{ include "drogue-cloud-core.image-pull-policy" . }}
          env:
            {{- include "drogue-cloud-core.rust.logging" ( dict "root" . "app" .Values.integrations.mqtt ) | nindent 12 }}
            - name: MQTT__BIND_ADDR
              value: "0.0.0.0:{{ if .Values.endpoints.mqtt.insecure }}1883{{- else -}}8883{{- end }}"
            - name: MQTT__BIND_ADDR_WS
              value: "0.0.0.0:{{ if .Values.endpoints.mqtt.insecure }}8080{{- else -}}8443{{- end }}"
            - name: HEALTH__BIND_ADDR
              value: "0.0.0.0:9090"
            - name: INSTANCE
              valueFrom:
                configMapKeyRef:
                  name: configuration
                  key: instance
            - name: SSO_URL
              value: {{ include "drogue-cloud-common.ingress.url" (dict "root" . "prefix" "sso" "ingress" .Values.services.sso.ingress ) }}
            - name: OAUTH__SSO_URL
              value: $(SSO_URL)
            - name: OAUTH__CLIENTS__DROGUE__CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: keycloak-client-secret-drogue
                  key: CLIENT_ID
            - name: OAUTH__CLIENTS__DROGUE__CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: keycloak-client-secret-drogue
                  key: CLIENT_SECRET
                  optional: true
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: USER_AUTH__CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: keycloak-client-secret-services
                  key: CLIENT_ID
            - name: USER_AUTH__CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: keycloak-client-secret-services
                  key: CLIENT_SECRET
            - name: USER_AUTH__SSO_URL
              value: $(SSO_URL)
            - name: REGISTRY__CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: keycloak-client-secret-services
                  key: CLIENT_ID
            - name: REGISTRY__CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: keycloak-client-secret-services
                  key: CLIENT_SECRET
            - name: REGISTRY__SSO_URL
              value: $(SSO_URL)
            - name: SERVICE__KAFKA__BOOTSTRAP_SERVERS
              value: {{ include "drogue-cloud-common.kafka-bootstrap-server" . -}}
            {{- include "drogue-cloud-common.kafka-properties" (dict "root" . "prefix" "SERVICE__KAFKA__PROPERTIES__" ) | nindent 12 }}
            - name: COMMAND_KAFKA_SINK__TOPIC
              value: iot-commands
            - name: COMMAND_KAFKA_SINK__BOOTSTRAP_SERVERS
              value: {{ include "drogue-cloud-common.kafka-bootstrap-server" . -}}
            {{- include "drogue-cloud-common.kafka-properties" (dict "root" . "prefix" "COMMAND_KAFKA_SINK__PROPERTIES__" ) | nindent 12 }}

            {{ if .Values.integrations.mqtt.insecure }}
            - name: DISABLE_TLS
              value: "true"
            {{ else }}
            - name: CERT_BUNDLE_FILE # TLS
              value: /etc/endpoint/tls.crt
            - name: KEY_FILE # TLS
              value: /etc/endpoint/tls.key
            {{ end }}

          ports:
            - containerPort: {{ if .Values.integrations.mqtt.insecure }}1883{{- else -}}8883{{- end }}
              name: service
              protocol: TCP
            - containerPort: {{ if .Values.integrations.mqttWs.insecure }}8080{{- else -}}8443{{- end }}
              name: service-ws
              protocol: TCP

          resources:
            limits:
              memory: 64Mi

          readinessProbe:
            initialDelaySeconds: 2
            periodSeconds: 1
            timeoutSeconds: 1
            failureThreshold: 3
            httpGet:
              port: 9090
              path: /readiness
          livenessProbe:
            initialDelaySeconds: 2
            periodSeconds: 1
            timeoutSeconds: 1
            failureThreshold: 3
            httpGet:
              port: 9090
              path: /liveness

          {{- if not .Values.integrations.mqtt.insecure }}
          volumeMounts:
            - mountPath: /etc/endpoint
              name: endpoint-tls
          {{- end }}

      volumes:

        {{- if not .Values.integrations.mqtt.insecure }}
        - name: endpoint-tls
          secret:
            secretName: mqtt-endpoint-tls
        {{- end }}

        - name: client-secret-services
          secret:
            secretName: keycloak-client-secret-services
