{{- if and .Values.grafana.keycloak.enabled .Values.grafana.keycloak.client.create }}
{{ $app := (dict "root" . "app" .Values.grafana.keycloak.client ) }}
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: post-install-keycloak-config-grafana
data:
  client.json: |
    {
      "clientId": "grafana",
      "clientAuthenticatorType": "client-secret",
      "enabled": true,
      "publicClient": true,
      "implicitFlowEnabled": true,
      "standardFlowEnabled": true,
      "directAccessGrantsEnabled": false,
      "serviceAccountsEnabled": false,
      "fullScopeAllowed": true,
      "defaultClientScopes": [
        "email",
        "profile",
        "roles",
        "web-origins"
      ],
      "optionalClientScopes": [
        "address",
        "microprofile-jwt",
        "offline_access",
        "phone"
      ],
      "protocolMappers": [
        {
          "name": "add-grafana-roles",
          "protocol": "openid-connect",
          "protocolMapper": "oidc-usermodel-client-role-mapper",
          "consentRequired": false,
          "config":{
            "multivalued": "true",
            "userinfo.token.claim": "true",
            "claim.name": "roles",
            "jsonType.label": "String",
            "usermodel.clientRoleMapping.clientId": "grafana"
          }
        }
      ]
    }
---
kind: Job
apiVersion: batch/v1
metadata:
  name: post-install-keycloak-grafana
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
    helm.sh/hook-weight: "5"
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-delete-policy: before-hook-creation
  labels:
      job: post-install-keycloak-grafana
spec:
  backoffLimit: 1000
  completions: 1
  parallelism: 1
  ttlSecondsAfterFinished: 600
  template:
    spec:
      {{- include "drogue-cloud-common.pod-security-context" $app | nindent 6 }}
      restartPolicy: OnFailure

      volumes:
        - name: init-data
          configMap:
            name: post-install-keycloak-config-grafana

      containers:
        - name: post-install
          image: {{ .Values.global.drogueCloud.keycloak.postInstall.image }}
          imagePullPolicy: IfNotPresent

          {{- include "drogue-cloud-common.container-security-context" $app | nindent 10 }}

          env:
            - name: ADMIN_USERNAME
              valueFrom:
                secretKeyRef:
                  name: sso-initial-admin
                  key: username
            - name: ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: sso-initial-admin
                  key: password

            - name: KEYCLOAK_URL
              value: {{ include "drogue-cloud-common.keycloak.internal.url" . | quote }}

            - name: KCADM_PATH
              value: "/opt/keycloak/bin/kcadm.sh"

            {{- if and (not .Values.global.drogueCloud.keycloak.insecure ) .Values.global.drogueCloud.useServiceCA }}
            - name: CUSTOM_TRUSTSTORE
              value: "/var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt"
            {{- end }}

          volumeMounts:
            - mountPath: /etc/init-data
              name: init-data

          command:
            - bash
            - -exc
            - |

              kcadm() { local cmd="$1" ; shift ; "$KCADM_PATH" "$cmd" --config /tmp/kcadm.config "$@" ; }

              # set up trust store
              if [[ -n "${CUSTOM_TRUSTSTORE}" ]]; then
                keytool -importcert -noprompt -trustcacerts -file "${CUSTOM_TRUSTSTORE}" -keystore /tmp/truststore.jks -storepass temp1234 -storetype JKS
                kcadm config truststore /tmp/truststore.jks --trustpass temp1234
              fi

              # log in to keycloak
              kcadm config credentials config --server "$KEYCLOAK_URL" --realm master --user "$ADMIN_USERNAME" --password "$ADMIN_PASSWORD"

              # create clients - grafana
              ID=$(kcadm get clients -r drogue --query "clientId=grafana" --fields id --format csv --noquotes)
              CLIENT_OPTS=()
              CLIENT_OPTS+=(-s "redirectUris=[\"{{ include "drogue-cloud-common.ingress.url" (dict "root" . "prefix" "grafana" "ingress" .Values.grafana.ingress ) }}/login/generic_oauth\"]")
              if [[ -n "$ID" ]]; then
                kcadm update "clients/$ID" -r drogue -f /etc/init-data/client.json "${CLIENT_OPTS[@]}"
              else
                kcadm create clients -r drogue -f /etc/init-data/client.json "${CLIENT_OPTS[@]}"
              fi

              # create client roles
              ID=$(kcadm get clients -r drogue --query "clientId=grafana" --fields id --format csv --noquotes)
              kcadm create clients/${ID}/roles -r drogue -s name=grafana-admin || true
              kcadm create clients/${ID}/roles -r drogue -s name=grafana-editor || true


{{- end -}}